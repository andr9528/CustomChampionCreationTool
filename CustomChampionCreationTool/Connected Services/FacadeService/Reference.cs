//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CustomChampionCreationTool.FacadeService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FacadeService.IFacade")]
    public interface IFacade {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/GetData", ReplyAction="http://tempuri.org/IFacade/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/GetData", ReplyAction="http://tempuri.org/IFacade/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/Initialize", ReplyAction="http://tempuri.org/IFacade/InitializeResponse")]
        CCCTLibrary.ReturnMessage Initialize();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/Initialize", ReplyAction="http://tempuri.org/IFacade/InitializeResponse")]
        System.Threading.Tasks.Task<CCCTLibrary.ReturnMessage> InitializeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/UpdateResource", ReplyAction="http://tempuri.org/IFacade/UpdateResourceResponse")]
        CCCTLibrary.ReturnMessage UpdateResource(CCCTLibrary.Resource source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/UpdateResource", ReplyAction="http://tempuri.org/IFacade/UpdateResourceResponse")]
        System.Threading.Tasks.Task<CCCTLibrary.ReturnMessage> UpdateResourceAsync(CCCTLibrary.Resource source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/GetResources", ReplyAction="http://tempuri.org/IFacade/GetResourcesResponse")]
        System.Tuple<System.Collections.Generic.List<CCCTLibrary.Resource>, CCCTLibrary.ReturnMessage> GetResources();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/GetResources", ReplyAction="http://tempuri.org/IFacade/GetResourcesResponse")]
        System.Threading.Tasks.Task<System.Tuple<System.Collections.Generic.List<CCCTLibrary.Resource>, CCCTLibrary.ReturnMessage>> GetResourcesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/NewResource", ReplyAction="http://tempuri.org/IFacade/NewResourceResponse")]
        CCCTLibrary.ReturnMessage NewResource(CCCTLibrary.Resource source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/NewResource", ReplyAction="http://tempuri.org/IFacade/NewResourceResponse")]
        System.Threading.Tasks.Task<CCCTLibrary.ReturnMessage> NewResourceAsync(CCCTLibrary.Resource source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/DeleteResource", ReplyAction="http://tempuri.org/IFacade/DeleteResourceResponse")]
        CCCTLibrary.ReturnMessage DeleteResource(CCCTLibrary.Resource source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/DeleteResource", ReplyAction="http://tempuri.org/IFacade/DeleteResourceResponse")]
        System.Threading.Tasks.Task<CCCTLibrary.ReturnMessage> DeleteResourceAsync(CCCTLibrary.Resource source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/UpdateAbility", ReplyAction="http://tempuri.org/IFacade/UpdateAbilityResponse")]
        CCCTLibrary.ReturnMessage UpdateAbility(CCCTLibrary.Ability source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/UpdateAbility", ReplyAction="http://tempuri.org/IFacade/UpdateAbilityResponse")]
        System.Threading.Tasks.Task<CCCTLibrary.ReturnMessage> UpdateAbilityAsync(CCCTLibrary.Ability source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/GetAbilities", ReplyAction="http://tempuri.org/IFacade/GetAbilitiesResponse")]
        System.Tuple<System.Collections.Generic.List<CCCTLibrary.Ability>, CCCTLibrary.ReturnMessage> GetAbilities();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/GetAbilities", ReplyAction="http://tempuri.org/IFacade/GetAbilitiesResponse")]
        System.Threading.Tasks.Task<System.Tuple<System.Collections.Generic.List<CCCTLibrary.Ability>, CCCTLibrary.ReturnMessage>> GetAbilitiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/NewAbility", ReplyAction="http://tempuri.org/IFacade/NewAbilityResponse")]
        CCCTLibrary.ReturnMessage NewAbility(CCCTLibrary.Ability source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/NewAbility", ReplyAction="http://tempuri.org/IFacade/NewAbilityResponse")]
        System.Threading.Tasks.Task<CCCTLibrary.ReturnMessage> NewAbilityAsync(CCCTLibrary.Ability source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/DeleteAbility", ReplyAction="http://tempuri.org/IFacade/DeleteAbilityResponse")]
        CCCTLibrary.ReturnMessage DeleteAbility(CCCTLibrary.Ability source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/DeleteAbility", ReplyAction="http://tempuri.org/IFacade/DeleteAbilityResponse")]
        System.Threading.Tasks.Task<CCCTLibrary.ReturnMessage> DeleteAbilityAsync(CCCTLibrary.Ability source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/UpdateChampion", ReplyAction="http://tempuri.org/IFacade/UpdateChampionResponse")]
        CCCTLibrary.ReturnMessage UpdateChampion(CCCTLibrary.Champion source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/UpdateChampion", ReplyAction="http://tempuri.org/IFacade/UpdateChampionResponse")]
        System.Threading.Tasks.Task<CCCTLibrary.ReturnMessage> UpdateChampionAsync(CCCTLibrary.Champion source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/GetChampions", ReplyAction="http://tempuri.org/IFacade/GetChampionsResponse")]
        System.Tuple<System.Collections.Generic.List<CCCTLibrary.Champion>, CCCTLibrary.ReturnMessage> GetChampions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/GetChampions", ReplyAction="http://tempuri.org/IFacade/GetChampionsResponse")]
        System.Threading.Tasks.Task<System.Tuple<System.Collections.Generic.List<CCCTLibrary.Champion>, CCCTLibrary.ReturnMessage>> GetChampionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/NewChampion", ReplyAction="http://tempuri.org/IFacade/NewChampionResponse")]
        CCCTLibrary.ReturnMessage NewChampion(CCCTLibrary.Champion source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/NewChampion", ReplyAction="http://tempuri.org/IFacade/NewChampionResponse")]
        System.Threading.Tasks.Task<CCCTLibrary.ReturnMessage> NewChampionAsync(CCCTLibrary.Champion source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/DeleteChampion", ReplyAction="http://tempuri.org/IFacade/DeleteChampionResponse")]
        CCCTLibrary.ReturnMessage DeleteChampion(CCCTLibrary.Champion source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/DeleteChampion", ReplyAction="http://tempuri.org/IFacade/DeleteChampionResponse")]
        System.Threading.Tasks.Task<CCCTLibrary.ReturnMessage> DeleteChampionAsync(CCCTLibrary.Champion source);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFacadeChannel : CustomChampionCreationTool.FacadeService.IFacade, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FacadeClient : System.ServiceModel.ClientBase<CustomChampionCreationTool.FacadeService.IFacade>, CustomChampionCreationTool.FacadeService.IFacade {
        
        public FacadeClient() {
        }
        
        public FacadeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FacadeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FacadeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FacadeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public CCCTLibrary.ReturnMessage Initialize() {
            return base.Channel.Initialize();
        }
        
        public System.Threading.Tasks.Task<CCCTLibrary.ReturnMessage> InitializeAsync() {
            return base.Channel.InitializeAsync();
        }
        
        public CCCTLibrary.ReturnMessage UpdateResource(CCCTLibrary.Resource source) {
            return base.Channel.UpdateResource(source);
        }
        
        public System.Threading.Tasks.Task<CCCTLibrary.ReturnMessage> UpdateResourceAsync(CCCTLibrary.Resource source) {
            return base.Channel.UpdateResourceAsync(source);
        }
        
        public System.Tuple<System.Collections.Generic.List<CCCTLibrary.Resource>, CCCTLibrary.ReturnMessage> GetResources() {
            return base.Channel.GetResources();
        }
        
        public System.Threading.Tasks.Task<System.Tuple<System.Collections.Generic.List<CCCTLibrary.Resource>, CCCTLibrary.ReturnMessage>> GetResourcesAsync() {
            return base.Channel.GetResourcesAsync();
        }
        
        public CCCTLibrary.ReturnMessage NewResource(CCCTLibrary.Resource source) {
            return base.Channel.NewResource(source);
        }
        
        public System.Threading.Tasks.Task<CCCTLibrary.ReturnMessage> NewResourceAsync(CCCTLibrary.Resource source) {
            return base.Channel.NewResourceAsync(source);
        }
        
        public CCCTLibrary.ReturnMessage DeleteResource(CCCTLibrary.Resource source) {
            return base.Channel.DeleteResource(source);
        }
        
        public System.Threading.Tasks.Task<CCCTLibrary.ReturnMessage> DeleteResourceAsync(CCCTLibrary.Resource source) {
            return base.Channel.DeleteResourceAsync(source);
        }
        
        public CCCTLibrary.ReturnMessage UpdateAbility(CCCTLibrary.Ability source) {
            return base.Channel.UpdateAbility(source);
        }
        
        public System.Threading.Tasks.Task<CCCTLibrary.ReturnMessage> UpdateAbilityAsync(CCCTLibrary.Ability source) {
            return base.Channel.UpdateAbilityAsync(source);
        }
        
        public System.Tuple<System.Collections.Generic.List<CCCTLibrary.Ability>, CCCTLibrary.ReturnMessage> GetAbilities() {
            return base.Channel.GetAbilities();
        }
        
        public System.Threading.Tasks.Task<System.Tuple<System.Collections.Generic.List<CCCTLibrary.Ability>, CCCTLibrary.ReturnMessage>> GetAbilitiesAsync() {
            return base.Channel.GetAbilitiesAsync();
        }
        
        public CCCTLibrary.ReturnMessage NewAbility(CCCTLibrary.Ability source) {
            return base.Channel.NewAbility(source);
        }
        
        public System.Threading.Tasks.Task<CCCTLibrary.ReturnMessage> NewAbilityAsync(CCCTLibrary.Ability source) {
            return base.Channel.NewAbilityAsync(source);
        }
        
        public CCCTLibrary.ReturnMessage DeleteAbility(CCCTLibrary.Ability source) {
            return base.Channel.DeleteAbility(source);
        }
        
        public System.Threading.Tasks.Task<CCCTLibrary.ReturnMessage> DeleteAbilityAsync(CCCTLibrary.Ability source) {
            return base.Channel.DeleteAbilityAsync(source);
        }
        
        public CCCTLibrary.ReturnMessage UpdateChampion(CCCTLibrary.Champion source) {
            return base.Channel.UpdateChampion(source);
        }
        
        public System.Threading.Tasks.Task<CCCTLibrary.ReturnMessage> UpdateChampionAsync(CCCTLibrary.Champion source) {
            return base.Channel.UpdateChampionAsync(source);
        }
        
        public System.Tuple<System.Collections.Generic.List<CCCTLibrary.Champion>, CCCTLibrary.ReturnMessage> GetChampions() {
            return base.Channel.GetChampions();
        }
        
        public System.Threading.Tasks.Task<System.Tuple<System.Collections.Generic.List<CCCTLibrary.Champion>, CCCTLibrary.ReturnMessage>> GetChampionsAsync() {
            return base.Channel.GetChampionsAsync();
        }
        
        public CCCTLibrary.ReturnMessage NewChampion(CCCTLibrary.Champion source) {
            return base.Channel.NewChampion(source);
        }
        
        public System.Threading.Tasks.Task<CCCTLibrary.ReturnMessage> NewChampionAsync(CCCTLibrary.Champion source) {
            return base.Channel.NewChampionAsync(source);
        }
        
        public CCCTLibrary.ReturnMessage DeleteChampion(CCCTLibrary.Champion source) {
            return base.Channel.DeleteChampion(source);
        }
        
        public System.Threading.Tasks.Task<CCCTLibrary.ReturnMessage> DeleteChampionAsync(CCCTLibrary.Champion source) {
            return base.Channel.DeleteChampionAsync(source);
        }
    }
}
